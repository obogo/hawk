'use strict';

var mongoose = require('mongoose'),
    LocalStrategy = require('passport-local').Strategy,
    BasicStrategy = require('passport-http').BasicStrategy,
    //ClientPasswordStrategy = require('passport-oauth2-client-password').Strategy,
    BearerStrategy = require('passport-http-bearer').Strategy,
    //TwitterStrategy = require('passport-twitter').Strategy,
    //FacebookStrategy = require('passport-facebook').Strategy,
    //GitHubStrategy = require('passport-github').Strategy,
    //GoogleStrategy = require('passport-google-oauth').OAuth2Strategy,
    //LinkedinStrategy = require('passport-linkedin').Strategy,
    User = mongoose.model('Teammate'), // Teammate / User
    OAuthClient = mongoose.model('OAuthClient'),
    AccessToken = mongoose.model('AccessToken'),
    config = require('config').loadConfig(),
    debug = require('debug')('passport');

module.exports = function (passport) {

    // Serialize the user id to push into the session
    passport.serializeUser(function (user, done) {
        done(null, user.id);
    });

    // Deserialize the user object based on a pre-serialized token
    // which is the user id
    passport.deserializeUser(function (id, done) {
        User.findOne({ _id: id})
//            .cache(true, 3600) // store for 1 hour
            .select('-salt -hashed_password').
            exec(function (err, user) {
                done(err, user);
            });
    });

    // Use local strategy
    passport.use(new LocalStrategy({
            usernameField: 'email',
            passwordField: 'password'
        },
        function (email, password, done) {
            User.findOne({
                email: email
            }, function (err, user) {
                if (err) {
                    return done(err);
                }
                if (!user) {
                    return done(null, false, {
                        message: 'Unknown user'
                    });
                }
                if (!user.authenticate(password)) {
                    return done(null, false, {
                        message: 'Invalid password'
                    });
                }
                return done(null, user);
            });
        }
    ));

    // Use basic strategy for OAuth
    passport.use(new BasicStrategy(
        function (clientKey, clientSecret, done) {
            debug('BaS: clientKey: %s, clientSecret: %s', clientKey, clientSecret);
            OAuthClient.findOne({ clientKey: clientKey, clientSecret: clientSecret }, function (err, client) {
                debug('BaS: clientKey: %s, clientToken: %s, err: %s, client: %s', clientKey, clientSecret, err, client);
                if (err) return done(err);
                if (!client) return done(null, false);
                return done(null, client);
            });
        }
    ));

    //passport.use(new ClientPasswordStrategy(
    //    function (clientId, clientSecret, done) {
    //        OAuthClient.findOne({ client: clientId }, function (err, client) {
    //            if (err) {
    //                return done(err);
    //            }
    //            if (!client) {
    //                return done(null, false);
    //            }
    //            if (client.clientSecret !== clientSecret) {
    //                return done(null, false);
    //            }
    //            return done(null, client);
    //        });
    //    }
    //));

    passport.use(new BearerStrategy(
        function (token, done) {
            debug('Bearer: token: %s', token);
            AccessToken.findOne({ token: token }, function (err, user) {
                if (err) {
                    return done(err);
                }
                if (!user) {
                    return done(null, false);
                }
                debug('Bearer: user: %s', user);
                return done(null, user, { scope: user.client.scope });
            });
        }
    ));

    // Use twitter strategy
    //passport.use(new TwitterStrategy({
    //        consumerKey: config.twitter.clientID,
    //        consumerSecret: config.twitter.clientSecret,
    //        callbackURL: config.twitter.callbackURL
    //    },
    //    function (token, tokenSecret, profile, done) {
    //        User.findOne({
    //            'twitter.id_str': profile.id
    //        }, function (err, user) {
    //            if (err) {
    //                return done(err);
    //            }
    //            if (user) {
    //                return done(err, user);
    //            }
    //            user = new User({
    //                name: profile.displayName,
    //                username: profile.username,
    //                provider: 'twitter',
    //                twitter: profile._json,
    //                roles: ['authenticated']
    //            });
    //            user.save(function (err) {
    //                if (err) console.log(err);
    //                return done(err, user);
    //            });
    //        });
    //    }
    //));

    // Use facebook strategy
    //passport.use(new FacebookStrategy({
    //        clientID: config.facebook.clientID,
    //        clientSecret: config.facebook.clientSecret,
    //        callbackURL: config.facebook.callbackURL
    //    },
    //    function (accessToken, refreshToken, profile, done) {
    //        User.findOne({
    //            'facebook.id': profile.id
    //        }, function (err, user) {
    //            if (err) {
    //                return done(err);
    //            }
    //            if (user) {
    //                return done(err, user);
    //            }
    //            user = new User({
    //                name: profile.displayName,
    //                email: profile.emails[0].value,
    //                username: profile.username || profile.emails[0].value.split('@')[0],
    //                provider: 'facebook',
    //                facebook: profile._json,
    //                roles: ['authenticated']
    //            });
    //            user.save(function (err) {
    //                if (err) console.log(err);
    //                return done(err, user);
    //            });
    //        });
    //    }
    //));

    // Use github strategy
    //passport.use(new GitHubStrategy({
    //        clientID: config.github.clientID,
    //        clientSecret: config.github.clientSecret,
    //        callbackURL: config.github.callbackURL
    //    },
    //    function (accessToken, refreshToken, profile, done) {
    //        User.findOne({
    //            'github.id': profile.id
    //        }, function (err, user) {
    //            if (user) {
    //                return done(err, user);
    //            }
    //            user = new User({
    //                name: profile.displayName,
    //                email: profile.emails[0].value,
    //                username: profile.username,
    //                provider: 'github',
    //                github: profile._json,
    //                roles: ['authenticated']
    //            });
    //            user.save(function (err) {
    //                if (err) console.log(err);
    //                return done(err, user);
    //            });
    //        });
    //    }
    //));

    // Use google strategy
    //passport.use(new GoogleStrategy({
    //        clientID: config.google.clientID,
    //        clientSecret: config.google.clientSecret,
    //        callbackURL: config.google.callbackURL
    //    },
    //    function (accessToken, refreshToken, profile, done) {
    //        User.findOne({
    //            'google.id': profile.id
    //        }, function (err, user) {
    //            if (user) {
    //                return done(err, user);
    //            }
    //            user = new User({
    //                name: profile.displayName,
    //                email: profile.emails[0].value,
    //                username: profile.emails[0].value,
    //                provider: 'google',
    //                google: profile._json,
    //                roles: ['authenticated']
    //            });
    //            user.save(function (err) {
    //                if (err) console.log(err);
    //                return done(err, user);
    //            });
    //        });
    //    }
    //));

    // use linkedin strategy
    //passport.use(new LinkedinStrategy({
    //        consumerKey: config.linkedin.clientID,
    //        consumerSecret: config.linkedin.clientSecret,
    //        callbackURL: config.linkedin.callbackURL,
    //        profileFields: ['id', 'first-name', 'last-name', 'email-address']
    //    },
    //    function (accessToken, refreshToken, profile, done) {
    //        User.findOne({
    //            'linkedin.id': profile.id
    //        }, function (err, user) {
    //            if (user) {
    //                return done(err, user);
    //            }
    //            user = new User({
    //                name: profile.displayName,
    //                email: profile.emails[0].value,
    //                username: profile.emails[0].value,
    //                provider: 'linkedin',
    //                roles: ['authenticated']
    //            });
    //            user.save(function (err) {
    //                if (err) console.log(err);
    //                return done(err, user);
    //            });
    //        });
    //    }
    //));
};
